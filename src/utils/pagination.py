from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton
from aiogram.types import Message

from services import services as service_user


paginationTypeText: dict = {
    'order': ('üì¶ –ó–∞–∫–∞–∑', service_user.get_my_orders)
}


class Pagination(CallbackData, prefix="pag"):
    action: str  # –î–µ–π—Å—Ç–≤–∏–µ
    page: int  # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    type: str  # –¢–∏–ø –ü–∞–≥–∏–Ω–∞—Ü–∏–∏


async def pagination(data: list, type_: str, message: Message, page=0) -> None:
    builder = InlineKeyboardBuilder()
    start_offset: int = page * 3
    limit: int = 3
    end_offset: int = start_offset + limit

    for data_id in data[start_offset:end_offset]:
        builder.row(
            InlineKeyboardButton(
                text=f'{paginationTypeText.get(type_)[0]} ‚Ññ{data_id}', callback_data=f'order_user_‚Ññ{data_id}'
            )
        )

    buttons_row: list = []
    if page > 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–µ—Ä–≤–∞—è
        buttons_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è", callback_data=Pagination(action="prev", page=page - 1, type=type_).pack())
        )
    if end_offset < len(data):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—â—ë –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        buttons_row.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=Pagination(action="next", page=page + 1, type=type_).pack())
        )
    builder.row(*buttons_row)
    builder.row(InlineKeyboardButton(text='¬´ –ù–∞–∑–∞–¥', callback_data='back_to_profile'))
    await message.answer('–í–∞—à–∏ –ó–∞–∫–∞–∑—ã:', reply_markup=builder.as_markup())
